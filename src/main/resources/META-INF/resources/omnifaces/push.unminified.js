/*
 * Copyright 2015 OmniFaces.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
var OmniFaces = OmniFaces || {};

/**
 * Manage web socket push channels. This script is used by <code>&lt;o:socket&gt;</code>.
 * 
 * @author Bauke Scholtz
 * @see org.omnifaces.push.Socket
 * @since 2.3
 */
OmniFaces.Push = (function() {

	var WS_SUPPORTED = !!window.WebSocket;
	var BASE_URI = window.location.protocol.replace("http", "ws") + "//" + window.location.host;
	var URI_PREFIX = "/omnifaces.push";

	var sockets = {};

	return {

		/**
		 * Open a web socket on the given channel.
		 * @param contextPath Required; the context path of the application. Can be an empty string.
		 * @param channel Required; the name of the web socket channel. All open websockets on the same channel name 
		 * will receive the same push notification from the server. If you want to make the web socket private to a
		 * specific user or group of users, then best is to append an autogenerated identifier to the channel name which
		 * identifies the specific user or group of users.
		 * @param onmessage Required; the JavaScript event handler function that is invoked when a message is received
		 * from the server. The function will be invoked with three arguments: the push message, the channel name and 
		 * the raw <code>MessageEvent</code> itself.
		 * @param onclose Optional; the JavaScript event handler function that is invoked when the web socket is closed.
		 * The function will be invoked with three arguments: the close reason code, the channel name and the raw 
		 * <code>CloseEvent</code> itself. Note that this will also be invoked on errors and that you can inspect the
		 * close reason code if an error occurred and which one (i.e. when the code is not 1000). See also
		 * <a href="http://tools.ietf.org/html/rfc6455#section-7.4.1">RFC 6455 section 7.4.1</a> and
		 * <a href="http://docs.oracle.com/javaee/7/api/javax/websocket/CloseReason.CloseCodes.html">CloseCodes</a> API
		 * for an elaborate list.
		 */
		open: function(contextPath, channel, onmessage, onclose) {
			if (typeof onmessage !== "function") {
				onmessage = window[onmessage];
			}

			if (onclose && (typeof onclose !== "function")) {
				onclose = window[onclose];
			} 

			if (!WS_SUPPORTED) { // IE6-9.
				if (onclose) {
					onclose(-1, channel);
				}

				return;
			}

			var path = encodeURIComponent(channel);
			var socket = sockets[path];

			if (!socket) {
				socket = sockets[path] = new WebSocket(BASE_URI + contextPath + URI_PREFIX + "/" + path);
			}

			socket.onmessage = function(event) {
				onmessage(JSON.parse(event.data), channel, event);
			};

			if (onclose) {
				socket.onclose = function(event) {
					onclose(event.code, channel, event);
				};
			}
			else {
				delete socket.onclose;
			}
		},

		/**
		 * Close the web socket on the given channel.
		 * @param channel The name of the web socket channel. Required.
		 * @throws Error When channel argument is not a string.
		 */
		close: function(channel) {
			if (typeof channel !== "string") {
				throw new Error("channel");
			}

			var path = encodeURIComponent(channel);
			var socket = sockets[path];

			if (socket) {
				socket.close();
				delete sockets[path];
			}
		}
	};

})();